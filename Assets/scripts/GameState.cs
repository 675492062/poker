//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//using System;
using UnityEngine;
//namespace AssemblyCSharp
//{
enum State {Start=1, Turn, otherTurn, Result, End};
enum Card {One=1, Two, Three, Four, Five,Six, Seven,Eight,Nine,Ten, Jack,Queen,King, JokerSamll,JokerBig};
//static float[] CardValue = new float[]{1,2,3,4,5,6,7,8,9,10,0.5,0.5,0.5,0.5,0.5};
class PlayerTurn
{
	public int pos = 0;
	public int[] inHandCards ;

	public PlayerTurn(int thepos, int[] cards = null)
	{
		pos = thepos;
		if (!cards)
			inHandCards = new int[]{};
		else
			inHandCards = cards;

	}

	public bool canAddCard()
	{
		return inHandCards.Length < 5;
	}

	private	int randCard()
	{
		return Random.Range (1, (int)Card.JokerBig + 1);
	}

	public bool aiAddCard()
	{
		if (Random.Range (0, 1) >= 0.5) {
			inHandCards[inHandCards.Length] = Random.Range(
		}
	}
}
public class GameState :MonoBehaviour
{
	private float[] CardValue = new float[]{1f,2f,3f,4f,5,6,7,8,9,10,0.5f,0.5f,0.5f,0.5f,0.5f};
	private State stateName = State.Start;
	private Card[] cards = null;
	private Card[] inHandCards = null;
	private int cardIndx = 0;
	private int[] playersTurn ;
	private int[] turnStatus;
	//private Array cardPool = new Array();
	public GameState ()
	{

	}

	public void init(int num)
	{
		//playersTurn record the position of the player on the table. n,s ,w,e
		int [] nextSeats = {1,2,3,4};//1 is east , 2 south, etc.

		playersTurn = new int[num];
		turnStatus = new int[num];
		for (int i=0; i <num; i++) {
			playersTurn[i] = new PlayerTurn( nextSeats[i], null);
			turnStatus[i] = 0; //0 means turn not finished
		}

	}

	void start()
	{
	}

	private	int randCard()
	{
		return Random.Range (1, (int)Card.JokerBig + 1);
	}
	private float cardPoint(Card card)
	{

		return (float) CardValue[ (int) card -1];
	}
	void Update()
	{
		switch (stateName) {
			
		case State.Start:
			cardIndx = 0;
			userAdd = false;
			//cards = new Card[54];
			//todo: get card from pool;
			int num = Random.Range (1, (int)Card.JokerBig + 1);
			//inHandCards = new Card[5];
			//inHandCards.
			Debug.Log ("you get " + ((Card)num).ToString ());
			inHandCards = new Card[5] ;
			inHandCards[cardIndx++] = (Card) num;
			//Debug.Log("you get " + num);
			stateName ++;
			break;			
		case State.Turn:
			if (userAdd && cardIndx < 5)
			{
				int num2 = Random.Range (1, (int)Card.JokerBig + 1);
				Debug.Log ("you add " + ((Card)num2).ToString ());
				userAdd = false;
				inHandCards[cardIndx++] = (Card) num2;
				float totalpoints = 0;
				string str = "";
				for (int i =0; i < inHandCards.Length ; i ++)
				{
					if (inHandCards[i] > 0) //0 means no card yet
					{
						str = str + ((Card) inHandCards[i]).ToString() + ",";
						totalpoints += cardPoint((Card) inHandCards[i]);
					}
				}
				Debug.Log("your hand cards are " + str + " Total points: "  + totalpoints);

				if (totalpoints > 10.5)
				{
					stateName = State.End;
				}
			}

			break;
		case State.otherTurn:
			//get next player turn
			PlayerTurn playerTurn ;
			for (int i=0; i < turnStatus.Length; i ++)
			{
				if (turnStatus[i] == 0)
				{
					playerTurn = playersTurn[i];
					turnStatus[i] = 1; //turn start;

					break;
				}
			}
			//simulate add cards
			if(playerTurn.aiAddCard())
				playerTurn.aiAddCard
			break;
		case State.End:
			Debug.Log("your lose"); 
			stateName ++;
			break;
			
		}

		if (newGame) {
			newGame = false;
			stateName = State.Start;
		}

	}

	private bool userAdd = false;
	private bool newGame = false;
	void OnGUI()//better put logic in Update Function
	{
		if (GUILayout.Button ("More Card")) {
			userAdd = true;
		}

		if (stateName == State.End) {
			if (GUILayout.Button("Restart")){
				//stateName = State.Start;
				newGame = true;
			}
		}
	}
}
//}

